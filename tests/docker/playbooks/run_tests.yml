---
- name: Initialize test environment
  hosts: all
  gather_facts: true
  become: true
  vars:
    test_dir: /tmp/taskguard-tests
    venv_dir: /tmp/taskguard-venv
    test_results_dir: "{{ test_results_dir | default('/tmp/taskguard-test-results') }}"
    src_dir: "{{ src_dir | default('/app') }}"
  tasks:
    - name: Create test directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ test_dir }}"
        - "{{ test_results_dir }}"

    - name: Copy test files
      copy:
        src: "{{ item }}"
        dest: "{{ test_dir }}/"
        mode: '0644'
      with_fileglob:
        - "{{ src_dir }}/tests/test_*.py"

    - name: Install system dependencies
      block:
        - name: Install Python and build tools (Alpine)
          apk:
            name:
              - python3
              - python3-dev
              - gcc
              - musl-dev
              - libffi-dev
              - openssl-dev
              - make
            state: present
          when: ansible_os_family == 'Alpine'

        - name: Install Python and build tools (Debian/Ubuntu)
          apt:
            name:
              - python3
              - python3-dev
              - python3-venv
              - build-essential
              - libssl-dev
              - libffi-dev
            state: present
            update_cache: yes
          when: ansible_os_family == 'Debian'

        - name: Install Python and build tools (RedHat/CentOS)
          yum:
            name:
              - python3
              - python3-devel
              - gcc
              - libffi-devel
              - openssl-devel
            state: present
          when: ansible_os_family == 'RedHat'

        - name: Install Python and build tools (Arch)
          pacman:
            name:
              - python
              - python-pip
              - gcc
              - libffi
              - openssl
            state: present
          when: ansible_os_family == 'Archlinux'

    - name: Set up Python virtual environment
      command: "python3 -m venv {{ venv_dir }}"
      args:
        creates: "{{ venv_dir }}"

    - name: Install build dependencies
      pip:
        name:
          - pip
          - setuptools
          - wheel
        state: latest
        virtualenv: "{{ venv_dir }}"
        virtualenv_command: python3 -m venv

    - name: Install TaskGuard in development mode
      pip:
        requirements: "{{ src_dir }}/requirements-dev.txt"
        virtualenv: "{{ venv_dir }}"
        virtualenv_command: python3 -m venv

- name: Run tests
  hosts: all
  gather_facts: false
  become: false
  vars:
    test_dir: /tmp/taskguard-tests
    venv_dir: /tmp/taskguard-venv
    test_results_dir: "{{ test_results_dir | default('/tmp/taskguard-test-results') }}"
  tasks:
    - name: Ensure test results directory exists
      file:
        path: "{{ test_results_dir }}"
        state: directory
        mode: '0755'

    - name: Run basic tests
      command: "{{ venv_dir }}/bin/python -m pytest {{ test_dir }}/test_basic.py -v --junit-xml={{ test_results_dir }}/{{ inventory_hostname }}-basic.xml"
      register: test_result
      ignore_errors: true
      changed_when: false

    - name: Run security scanner tests
      command: "{{ venv_dir }}/bin/python -m pytest {{ test_dir }}/test_security.py -v --junit-xml={{ test_results_dir }}/{{ inventory_hostname }}-security.xml"
      register: security_test_result
      ignore_errors: true
      changed_when: false

    - name: Run LLM interface tests (Ubuntu only)
      command: "{{ venv_dir }}/bin/python -m pytest {{ test_dir }}/test_llm_interface.py -v --junit-xml={{ test_results_dir }}/{{ inventory_hostname }}-llm.xml"
      register: llm_test_result
      ignore_errors: true
      changed_when: false
      when: '"test-ubuntu" in inventory_hostname'

    - name: Test TaskGuard CLI
      command: "{{ venv_dir }}/bin/taskguard --version"
      register: cli_test
      ignore_errors: true
      changed_when: false

    - name: Collect test results
      set_fact:
        test_results: >
          {
            "host": "{{ inventory_hostname }}",
            "os_family": "{{ ansible_os_family }}",
            "os_distribution": "{{ ansible_distribution | default('unknown') }}",
            "os_version": "{{ ansible_distribution_version | default('unknown') }}",
            "basic_tests": {
              "passed": "{{ 'test_result is defined' and test_result.rc == 0 }}",
              "output": "{{ test_result.stdout_lines | default([]) | join('\\n') }}",
              "error": "{{ test_result.stderr_lines | default([]) | join('\\n') }}"
            },
            "security_tests": {
              "passed": "{{ 'security_test_result is defined' and security_test_result.rc == 0 }}",
              "output": "{{ security_test_result.stdout_lines | default([]) | join('\\n') }}",
              "error": "{{ security_test_result.stderr_lines | default([]) | join('\\n') }}"
            },
            "llm_tests": {
              "passed": "{{ 'llm_test_result is defined' and llm_test_result.rc == 0 }}",
              "output": "{{ llm_test_result.stdout_lines | default([]) | join('\\n') }}",
              "error": "{{ llm_test_result.stderr_lines | default([]) | join('\\n') }}",
              "skipped": "{{ 'test-ubuntu' not in inventory_hostname }}"
            },
            "cli_test": {
              "passed": "{{ 'cli_test is defined' and cli_test.rc == 0 }}",
              "output": "{{ cli_test.stdout | default('') }}",
              "error": "{{ cli_test.stderr | default('') }}"
            }
          }

    - name: Save test results to file
      copy:
        content: "{{ test_results | to_nice_json }}"
        dest: "{{ test_results_dir }}/{{ inventory_hostname }}-results.json"
        mode: '0644'

- name: Generate test report
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    test_results_dir: "{{ test_results_dir | default('/tmp/taskguard-test-results') }}
  tasks:
    - name: Find all test result files
      find:
        paths: "{{ test_results_dir }}"
        patterns: '*-results.json'
        recurse: no
      register: test_result_files

    - name: Load test results
      set_fact:
        all_test_results: "{{ test_result_files.files | map(attribute='path') | map('lookup', 'file') | map('from_json') | list }}"

    - name: Create HTML test report
      template:
        src: templates/test_report.j2
        dest: "{{ test_results_dir }}/report.html"

    - name: Generate test summary
      copy:
        content: |
          Test Execution Summary
          =====================
          
          {% for result in all_test_results %}
          Host: {{ result.host }} ({{ result.os_family }} {{ result.os_distribution }} {{ result.os_version }})
          --------------------------------------------------
          Basic Tests:       {{ 'PASSED' if result.basic_tests.passed | bool else 'FAILED' }}
          Security Tests:    {{ 'PASSED' if result.security_tests.passed | bool else 'FAILED' }}
          LLM Tests:         {{ 'SKIPPED' if result.llm_tests.skipped | bool else 'PASSED' if result.llm_tests.passed | bool else 'FAILED' }}
          CLI Test:          {{ 'PASSED' if result.cli_test.passed | bool else 'FAILED' }}
          
          {% endfor %}
          
          Detailed report available at: {{ test_results_dir }}/report.html
        dest: "{{ test_results_dir }}/summary.txt"

    - name: Show test report location
      debug:
        msg: "Test report generated at {{ test_results_dir }}/report.html"
